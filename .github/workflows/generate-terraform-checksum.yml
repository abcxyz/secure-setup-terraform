# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'generate terraform checksum'

on:
  workflow_dispatch:
    inputs:
      terraform_version:
        type: string
        description: Terraform version (e.g 1.3.2)
        required: false
        default: '1.3.2'

jobs:
  get_and_verify_checksum:
    runs-on: 'ubuntu-latest'
    env:
      VERSION: '${{ inputs.terraform_version }}'
    outputs:
      binary_checksum: '${{ steps.verify-checksum.outputs.binary_checksum }}'
      archive_checksum: '${{ steps.verify-checksum.outputs.archive_checksum }}'
    steps:
      - 
        name: 'verify-checksum'
        run: |-
          # Set a local gnupg home so as not to pollute the environment
          export GNUPGHOME=./.gnupg

          # Terraform variables
          export ARCH=darwin_amd64
          export RELEASE_URL=https://releases.hashicorp.com/terraform/${VERSION}
          export BIN_FILE=terraform_${VERSION}_${ARCH}.zip
          export SHA_FILE=terraform_${VERSION}_SHA256SUMS
          export SIG_FILE=terraform_${VERSION}_SHA256SUMS.sig

          # Generate a temporary key to use for verification
          gpg --batch --quick-generate-key --batch --passphrase "" github-action@abcxyz.dev

          # Retrieve the hashicorp key
          curl --remote-name https://keybase.io/hashicorp/pgp_keys.asc

          # Import the key from hashicorp
          echo "importing key"
          gpg --batch --import pgp_keys.asc

          # Sign the hashicorp key with our key
          echo "signing key"
          gpg --batch --yes --trust-model always --sign-key 34365D9472D7468F

          # Download the archive, sha file and signature
          curl --remote-name ${RELEASE_URL}/${BIN_FILE}
          curl --remote-name ${RELEASE_URL}/${SHA_FILE}
          curl --remote-name ${RELEASE_URL}/${SIG_FILE}

          # Verify the signature against the sha file
          echo "verifying shas"
          gpg --batch --verify ${SIG_FILE} ${SHA_FILE}

          # Verify the archive's checksum
          shasum --algorithm 256 --check --ignore-missing ${SHA_FILE}

          # Extract the binary from the archive
          unzip -o ${BIN_FILE}

          # Extract only the shasum for the archive we care about
          ARCH_SUM=$(grep ${BIN_FILE} ${SHA_FILE} | cut -d' ' -f1)

          # Produce a checksum of the binary
          BIN_SUM=$(shasum -a 256 terraform | cut -d' ' -f1)

          # Store the binary and the archive checksums as outputs
          echo "archive_checksum=${ARCH_SUM}" >> $GITHUB_OUTPUT
          echo "binary_checksum=${BIN_SUM}" >> $GITHUB_OUTPUT

          unset GNUPGHOME
