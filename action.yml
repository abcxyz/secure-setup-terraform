# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'secure-setup-terraform action'
description: 'Verify that the installed terraform binary matches a pre-computed hash. Ensure that there is a checked in provider lock file and that it is read only so that terraform cannot update it.'
inputs:
  terraform_version:
    description: 'The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.'
    default: 'latest'
    required: false
  terraform_wrapper:
    description: 'Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.'
    default: 'true'
    required: false
  cli_config_credentials_hostname:
    description: 'From setup-terraform: The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.'
    default: 'app.terraform.io'
    required: false
  cli_config_credentials_token:
    description: 'From setup-terraform: The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.'
    required: false
  terraform_lockfile_location:
    description: 'Path to the directory containing the .terraform.lock.hcl file. This action will mark this file readonly to prevent terraform init calls from adding new providers.'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: 'setup-terraform'
      uses: 'hashicorp/setup-terraform@v2'
      with:
        terraform_version: '${{ inputs.terraform_version }}'
        terraform_wrapper: '${{ inputs.terraform_wrapper }}'
        cli_config_credentials_hostname: '${{ inputs.cli_config_credentials_hostname }}'
        cli_config_credentials_token: '${{ inputs.cli_config_credentials_token }}'

    - name: 'secure-terraform'
      shell: 'bash'
      env:
        RELEASE_VERSION: '0.2.2'
        RELEASE_LOCATION: 'https://github.com/abcxyz/secure-setup-terraform/releases/download'
      run: |-
        ARCH="amd6";
        if [ "${{runner.platform}}" = "ARM64" ];
        then
          ARCH="arm6"
        fi

        curl -H "Authorization: token ${{ github.token }}" -LO "${{env.RELEASE_LOCATION}}/v${{env.RELEASE_VERSION}}/secure-setup-terraform_${{env.RELEASE_VERSION}}_linux_${ARCH}.tar.gz"
        curl -H "Authorization: token ${{ github.token }}" -Lo terraform-checksums.json "${{env.RELEASE_LOCATION}}/v${{env.RELEASE_VERSION}}/secure-setup-terraform_${{env.RELEASE_VERSION}}_checksums.json"
        tar xf secure-setup-terraform_${{env.RELEASE_VERSION}}_linux_${ARCH}.tar.gz
        
        # Verify the terraform binary checksum
        CHECKSUM=$(jq -r --arg version ${{ inputs.terraform_version }} '.versions[] | select(.version==$version and .arch=="${ARCH}" and .os=="linux") | .binary_checksum' < terraform-checksums.json)

        # The terraform wrapper installs the actual binary as terraform-bin, check 
        # for its existence and verify its checksum. Otherwise look for the default
        # terrafrom binary
        if [ -f "$(which terraform-bin)" ];
        then
          echo "${CHECKSUM}  $(which terraform-bin)" > terraform.sha256
        else
          echo "${CHECKSUM}  $(which terraform)" > terraform.sha256
        fi
        shasum --algorithm 256 --check terraform.sha256

    # Recursively search for terraform files in the current repo and run a linter that fails when it finds calls to 'local-exec'
    - name: 'lint-terraform'
      shell: 'bash'
      run: ./lint-terraform ./

    # Search the .github/workflows for this project and run a linter that fails if it finds a direct call to the 'hashicorp/setup-terraform' action
    - name: 'lint-action'
      shell: 'bash'
      run: ./lint-action ./.github/workflows

    # Mark the provider file readonly so that new providers cannot be added during actuation
    - name: 'lock-provider-file'
      shell: 'bash'
      run: 'chmod 444 ${{ inputs.terraform_lockfile_location }}/.terraform.lock.hcl'
